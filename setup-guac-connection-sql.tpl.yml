---
# Ensure postgres init directory is present before we put any sql files there
bootcmd:
  - mkdir -p ${guac_connection_setup_path}

# Write template file that will be processed by python (pystache)
# Variables starting with <dollar-sign><left-curly-brace> will be replaced
#  by terraform before cloud-init writes this file to the Guacamole instance
# Variables starting with <left-curly-brace><left-curly-brace> will be
#  replaced by pystache when we run the render_guac_connection_template_sql.py
#  python script below
write_files:
  - path: "/root/guacamole_connection_template.sql"
    permissions: "0644"
    owner: root:root
    content: |
      --
      -- Create connection for GoPhish instance
      --

      INSERT INTO guacamole_connection (
        connection_name, protocol, max_connections, max_connections_per_user,
        proxy_port, proxy_hostname, proxy_encryption_method)
      VALUES (
        '${guac_gophish_connection_name}', '{{ vnc_username }}', 10, 10, 4822,
        'guacd', 'NONE');

      --
      -- Set up GoPhish connection details
      --

      INSERT INTO guacamole_connection_parameter (
        connection_id, parameter_name, parameter_value)
      SELECT connection_id, 'cursor', 'local'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT
        connection_id, 'sftp-directory', '/home/{{ vnc_username }}/Documents'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'sftp-username', '{{ vnc_username }}'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'sftp-private-key', '{{ vnc_user_private_ssh_key }}'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'sftp-server-alive-interval', '60'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'sftp-root-directory', '/home/{{ vnc_username }}/'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'enable-sftp', 'true'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'color-depth', '24'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'hostname', 'gophish.${pca_private_domain}'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'password', '{{ vnc_password }}'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}'
        UNION ALL
      SELECT connection_id, 'port', '5901'
      FROM guacamole_connection
      WHERE connection_name = '${guac_gophish_connection_name}';
  - path: "/root/render_guac_connection_template_sql.py"
    permissions: "0755"
    owner: root:root
    content: |
      #!/usr/bin/env python3

      """Create Guacamole connection setup SQL.

      This script fetches data from AWS SSM and then uses pystache to render a
      SQL template using that SSM data.
      """

      import boto3
      import pystache

      SQL_TEMPLATE = "/root/guacamole_connection_template.sql"
      SQL_OUTPUT_FILE = \
        "${guac_connection_setup_path}/${guac_connection_setup_filename}"

      # Inputs from terraform
      SSM_READ_ROLE_ARN = "${ssm_gophish_vnc_read_role_arn}"
      SSM_KEY_GOPHISH_VNC_PASSWORD = "${ssm_key_gophish_vnc_password}"
      SSM_KEY_GOPHISH_VNC_USER = "${ssm_key_gophish_vnc_user}"
      SSM_KEY_GOPHISH_VNC_USER_PRIVATE_SSH_KEY = \
        "${ssm_key_gophish_vnc_user_private_ssh_key}"

      # Create STS client
      sts = boto3.client("sts")

      # Assume the role that can read the SSM parameters
      stsresponse = sts.assume_role(
          RoleArn=SSM_READ_ROLE_ARN,
          RoleSessionName="guacamole_connection_setup"
      )
      newsession_id = stsresponse["Credentials"]["AccessKeyId"]
      newsession_key = stsresponse["Credentials"]["SecretAccessKey"]
      newsession_token = stsresponse["Credentials"]["SessionToken"]

      # Create a new client to access SSM using the temporary credentials
      ssm = boto3.client(
          "ssm",
          region_name="${aws_region}",
          aws_access_key_id=newsession_id,
          aws_secret_access_key=newsession_key,
          aws_session_token=newsession_token,
      )

      # Fetch the required parameters from SSM
      ssm_data = dict()
      for ssm_key, param_name in (
          (SSM_KEY_GOPHISH_VNC_USER, "vnc_username"),
          (SSM_KEY_GOPHISH_VNC_PASSWORD, "vnc_password"),
          (SSM_KEY_GOPHISH_VNC_USER_PRIVATE_SSH_KEY,
           "vnc_user_private_ssh_key")):
              ssm_parameter = ssm.get_parameter(
                Name=ssm_key, WithDecryption=True)["Parameter"]
              ssm_data[param_name] = ssm_parameter["Value"]

      # Render template with SSM data and write output file
      with open(SQL_TEMPLATE) as infile:
          with open(SQL_OUTPUT_FILE, "w") as outfile:
              outfile.write(pystache.render(infile.read(), ssm_data))

# Run python script above to render SQL template, then remove template
runcmd:
  - /root/render_guac_connection_template_sql.py
  - rm /root/guacamole_connection_template.sql
